apiVersion: v1
kind: Service
metadata:
  name: subnetter-api
  namespace: subnetter
spec:
  selector:
    app: subnetter-api
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  # Optional: expose as NodePort so host:8000 works via kind.yaml port map
  type: NodePort
  externalTrafficPolicy: Cluster
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subnetter-api
  namespace: subnetter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: subnetter-api
  template:
    metadata:
      labels:
        app: subnetter-api
    spec:
      containers:
      - name: api
        image: subnetter-api:dev
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: subnetter-config
        - secretRef:
            name: subnetter-secrets
        ports:
        - containerPort: 8000
          name: http
        # If you have a health endpoint, wire it here. For now, simple TCP checks:
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
        command: ["poetry","run","uvicorn","app.main:app","--host","0.0.0.0","--port","8000","--proxy-headers"]
